diff --color -ur rosidl-release-release-jazzy-rosidl_pycommon-4.6.4-1/rosidl_pycommon/__init__.py rosidl-release-release-jazzy-rosidl_pycommon-4.6.4-1-new/rosidl_pycommon/__init__.py
--- rosidl-release-release-jazzy-rosidl_pycommon-4.6.4-1/rosidl_pycommon/__init__.py	2024-09-06 19:06:37.000000000 +0200
+++ rosidl-release-release-jazzy-rosidl_pycommon-4.6.4-1-new/rosidl_pycommon/__init__.py	2024-11-10 11:32:51.858173454 +0100
@@ -20,6 +20,13 @@
 import sys
 
 import em
+
+try:
+    from em import Configuration
+    em_has_configuration = True
+except ImportError:
+    em_has_configuration = False
+
 from rosidl_parser.definition import IdlLocator
 from rosidl_parser.parser import parse_idl_file
 
@@ -146,20 +153,32 @@
         template_basepath = template_name.parent
         template_name = template_name.name
 
-    global interpreter
-    output = StringIO()
-    interpreter = em.Interpreter(
-        output=output,
-        options={
-            em.BUFFERED_OPT: True,
-            em.RAW_OPT: True,
-        },
-    )
-
     global template_prefix_path
     template_prefix_path.append(template_basepath)
     template_path = get_template_path(template_name)
 
+    global interpreter
+    output = StringIO()
+    if em_has_configuration:
+        config = Configuration(
+            defaultRoot=template_path,
+            defaultStdout=output,
+            deleteOnError=True,
+            rawErrors=True,
+            useProxy=True)
+        interpreter = em.Interpreter(
+            config=config,
+            dispatcher=False)
+    else:
+        interpreter = em.Interpreter(
+            output=output,
+            options={
+                em.BUFFERED_OPT: True,
+                em.RAW_OPT: True,
+            },
+        )
+
+
     # create copy before manipulating
     data = dict(data)
     _add_helper_functions(data)
@@ -169,7 +188,10 @@
             template_content = h.read()
             interpreter.invoke(
                 'beforeFile', name=template_name, file=h, locals=data)
-        interpreter.string(template_content, template_path, locals=data)
+        if em_has_configuration:
+            interpreter.string(template_content, locals=data)
+        else:
+            interpreter.string(template_content, template_path, locals=data)
         interpreter.invoke('afterFile')
     except Exception as e:  # noqa: F841
         if os.path.exists(output_file):
@@ -218,7 +240,10 @@
             'beforeInclude', name=str(template_path), file=h, locals=kwargs)
         content = h.read()
     try:
-        interpreter.string(content, str(template_path), kwargs)
+        if em_has_configuration:
+            interpreter.string(content, locals=kwargs)
+        else:
+            interpreter.string(content, template_path, locals=kwargs)
     except Exception as e:  # noqa: F841
         print(f"{e.__class__.__name__} in template '{template_path}': {e}",
               file=sys.stderr)
